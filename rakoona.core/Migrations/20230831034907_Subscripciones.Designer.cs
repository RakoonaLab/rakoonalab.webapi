// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rakoona.core.Context;

#nullable disable

namespace rakoona.coreMigrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230831034907_Subscripciones")]
    partial class Subscripciones
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Cartilla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("MascotaRef")
                        .HasColumnType("int")
                        .HasColumnName("MascotaRef");

                    b.HasKey("Id");

                    b.HasIndex("MascotaRef")
                        .IsUnique();

                    b.ToTable("Cartillas", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.ClienteClinica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("ClienteId");

                    b.Property<int>("ClinicaId")
                        .HasColumnType("int")
                        .HasColumnName("ClinicaId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ClinicaId");

                    b.ToTable("ClienteClinica", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Clinica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Nombre");

                    b.Property<int>("OrganizacionRef")
                        .HasColumnType("int")
                        .HasColumnName("OrganizacionRef");

                    b.HasKey("Id");

                    b.HasIndex("OrganizacionRef");

                    b.ToTable("Clinicas", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.ClinicaMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicaId")
                        .HasColumnType("int")
                        .HasColumnName("ClinicaId");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int")
                        .HasColumnName("MedicoRef");

                    b.HasKey("Id");

                    b.HasIndex("ClinicaId");

                    b.HasIndex("MedicoId");

                    b.ToTable("ClinicaMedicos", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comentarios");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2")
                        .HasColumnName("Fecha");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("MascotaRef")
                        .HasColumnType("int")
                        .HasColumnName("MascotaRef");

                    b.HasKey("Id");

                    b.HasIndex("MascotaRef");

                    b.ToTable("Citas", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartillaRef")
                        .HasColumnType("int")
                        .HasColumnName("CartillaRef");

                    b.Property<string>("Diagnostico")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Diagnostico");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaAplicacion");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("MedicoRef")
                        .HasColumnType("int")
                        .HasColumnName("MedicoRef");

                    b.Property<string>("Motivo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Motivo");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Observaciones");

                    b.HasKey("Id");

                    b.HasIndex("CartillaRef");

                    b.HasIndex("MedicoRef");

                    b.ToTable("Consultas", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Mediciones.MedicionDeFrecuenciaRespiratoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConsultaId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaAplicacion");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("MascotaRef")
                        .HasColumnType("int")
                        .HasColumnName("MascotaRef");

                    b.Property<int>("Valor")
                        .HasColumnType("int")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("MascotaRef");

                    b.ToTable("MedicionDeFrecuenciaRespiratoria", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Mediciones.MedicionDePeso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConsultaId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaAplicacion");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("MascotaRef")
                        .HasColumnType("int")
                        .HasColumnName("MascotaRef");

                    b.Property<double>("Valor")
                        .HasColumnType("float")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("MascotaRef");

                    b.ToTable("MedicionDePeso", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Mediciones.MedicionDePulso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caracteristicas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConsultaId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaAplicacion");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("MascotaRef")
                        .HasColumnType("int")
                        .HasColumnName("MascotaRef");

                    b.Property<int>("Valor")
                        .HasColumnType("int")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("MascotaRef");

                    b.ToTable("MedicionesDePulso", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Mediciones.MedicionDeRitmoCardiaco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConsultaId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaAplicacion");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("MascotaRef")
                        .HasColumnType("int")
                        .HasColumnName("MascotaRef");

                    b.Property<int>("Valor")
                        .HasColumnType("int")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("MascotaRef");

                    b.ToTable("MedicionesDeRitmoCardiaco", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Mediciones.MedicionDeTemperatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConsultaId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaAplicacion");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("MascotaRef")
                        .HasColumnType("int")
                        .HasColumnName("MascotaRef");

                    b.Property<double>("Valor")
                        .HasColumnType("float")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("MascotaRef");

                    b.ToTable("MedicionesDeTemperatura", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Domicilio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CP")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("CP");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Calle");

                    b.Property<string>("Colonia")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Colonia");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Estado");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Municipio");

                    b.Property<int>("PersonaRef")
                        .HasColumnType("int");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit")
                        .HasColumnName("Principal");

                    b.HasKey("Id");

                    b.HasIndex("PersonaRef");

                    b.ToTable("Domicilios", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Dosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<string>("MedicamentoRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedicamentoRef");

                    b.Property<int>("RecetaRef")
                        .HasColumnType("int")
                        .HasColumnName("RecetaRef");

                    b.HasKey("Id");

                    b.HasIndex("RecetaRef");

                    b.ToTable("Dosis", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Organizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<string>("UserRef")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("UserRef");

                    b.HasKey("Id");

                    b.HasIndex("UserRef")
                        .IsUnique()
                        .HasFilter("[UserRef] IS NOT NULL");

                    b.ToTable("Organizaciones", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.ClaseDeAnimales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("ClasesDeAnimales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExternalId = "dc9b119e-a965-4ac7-81fc-13c4784abede",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(6237),
                            Nombre = "Mamiforo"
                        });
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DescripcionRef")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.HasKey("Id");

                    b.HasIndex("DescripcionRef");

                    b.ToTable("ColoresPorMascota", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.DescripcionFisicaDeMascota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("MascotaRef")
                        .HasColumnType("int");

                    b.Property<int>("RazaRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MascotaRef")
                        .IsUnique();

                    b.HasIndex("RazaRef");

                    b.ToTable("DescripcionesFisicasDeMascotas", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.Especie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaseAnimalRef")
                        .HasColumnType("int")
                        .HasColumnName("ClaseAnimalRef");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("GeneroRef")
                        .HasColumnType("int")
                        .HasColumnName("GeneroRef");

                    b.Property<string>("NombreCientifico")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NombreCientifico");

                    b.Property<string>("NombreCorto")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NombreCorto");

                    b.Property<int>("OrdenAnimalRef")
                        .HasColumnType("int")
                        .HasColumnName("OrdenAnimalRef");

                    b.HasKey("Id");

                    b.HasIndex("ClaseAnimalRef");

                    b.HasIndex("GeneroRef");

                    b.HasIndex("OrdenAnimalRef");

                    b.ToTable("Especies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaseAnimalRef = 1,
                            ExternalId = "56e258c6-e09a-487c-bc80-87b137ef14a7",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(7343),
                            GeneroRef = 2,
                            NombreCorto = "Gato",
                            OrdenAnimalRef = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaseAnimalRef = 1,
                            ExternalId = "468732be-a4b6-427b-bf22-cd9fcea85df7",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(7438),
                            GeneroRef = 1,
                            NombreCorto = "Perro",
                            OrdenAnimalRef = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaseAnimalRef = 1,
                            ExternalId = "aeeb80c3-042a-4f26-8b62-fbcce5f1561e",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(7508),
                            GeneroRef = 3,
                            NombreCorto = "Hurón",
                            OrdenAnimalRef = 1
                        });
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.Familia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Familia", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExternalId = "7baa4c87-483e-49c6-943f-11ee8f60df85",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(6351),
                            Nombre = "Canidos"
                        },
                        new
                        {
                            Id = 2,
                            ExternalId = "ac43eb11-9045-458f-949c-ec1f04be7cd4",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(6946),
                            Nombre = "Félidos"
                        },
                        new
                        {
                            Id = 3,
                            ExternalId = "f9b2e4a0-cb67-432b-b708-89a6bc2ffd17",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(7019),
                            Nombre = "Mustélidos"
                        });
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.GeneroAnimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<int>("FamiliaRef")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("FamiliaRef");

                    b.ToTable("GeneroAnimal", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExternalId = "7daac0d4-226c-463b-8496-8165a2fa0057",
                            FamiliaRef = 1,
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(7138),
                            Nombre = "Canis"
                        },
                        new
                        {
                            Id = 2,
                            ExternalId = "af92c571-6b2c-4a23-8dfd-7d5c3263eb39",
                            FamiliaRef = 2,
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(7208),
                            Nombre = "Felis"
                        },
                        new
                        {
                            Id = 3,
                            ExternalId = "ee13382e-b7ed-4283-8696-534bcf306626",
                            FamiliaRef = 3,
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(7243),
                            Nombre = "Mustela"
                        });
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.ImagenPorMascota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("FileData");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FileName");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FileType");

                    b.Property<int>("MascotaRef")
                        .HasColumnType("int")
                        .HasColumnName("MascotaRef");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MascotaRef");

                    b.ToTable("ImagenesPorMascota", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.Mascota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnioNacimiento")
                        .HasColumnType("int")
                        .HasColumnName("AnioNacimiento");

                    b.Property<int?>("DiaNacimiento")
                        .HasColumnType("int")
                        .HasColumnName("DiaNacimiento");

                    b.Property<int>("DuenioRef")
                        .HasColumnType("int")
                        .HasColumnName("DuenioRef");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Genero");

                    b.Property<int?>("MesNacimiento")
                        .HasColumnType("int")
                        .HasColumnName("MesNacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("DuenioRef");

                    b.ToTable("Macotas", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.OrdenAnimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("OrdenAnimal", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExternalId = "0d8ea7df-7a8b-428d-b3ad-6e16465a8c2e",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(5357),
                            Nombre = "Carnívoro"
                        });
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.RazaAnimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EspecieRef")
                        .HasColumnType("int")
                        .HasColumnName("EspecieRef");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<string>("NombreCientifico")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NombreCientifico");

                    b.Property<string>("NombreColoquial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NombreColoquial");

                    b.HasKey("Id");

                    b.HasIndex("EspecieRef");

                    b.ToTable("Razas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EspecieRef = 2,
                            ExternalId = "e34675ad-98ea-4c21-b03f-83c0f4877b79",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(7906),
                            NombreColoquial = "Affenpinscher"
                        },
                        new
                        {
                            Id = 2,
                            EspecieRef = 2,
                            ExternalId = "f7b182fa-182b-45d9-b0de-91d3c2ad03bc",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(8110),
                            NombreColoquial = "Afgano"
                        },
                        new
                        {
                            Id = 3,
                            EspecieRef = 2,
                            ExternalId = "7f4a1cdd-e8c2-486c-a8c4-ae0d304a2d42",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(8187),
                            NombreColoquial = "Akita"
                        });
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Personas.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("PersonaRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaRef")
                        .IsUnique();

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Personas.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Apellidos");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<DateTime?>("FechaDeNacimiento")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeNacimiento");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombres");

                    b.Property<string>("UsuarioRef")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("UsuarioRef");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioRef")
                        .IsUnique()
                        .HasFilter("[UsuarioRef] IS NOT NULL");

                    b.ToTable("Personas", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Persona");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.PlanDeVacunacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Caducidad")
                        .HasColumnType("datetime2")
                        .HasColumnName("Caducidad");

                    b.Property<int>("CartillaRef")
                        .HasColumnType("int")
                        .HasColumnName("CartillaRef");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaAplicacion");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<string>("Laboratorio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Laboratorio");

                    b.Property<string>("Lote")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Lote");

                    b.Property<int>("MedicoRef")
                        .HasColumnType("int")
                        .HasColumnName("MedicoRef");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("CartillaRef");

                    b.HasIndex("MedicoRef");

                    b.ToTable("Vacunaciones", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Receta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsultaRef")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.HasKey("Id");

                    b.ToTable("Recetas", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Seguridad.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Planes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExternalId = "0916aac0-e3ac-4524-93e0-f58909bac73d",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(8358),
                            Nombre = "Free"
                        },
                        new
                        {
                            Id = 2,
                            ExternalId = "65982ce5-5999-4629-ab80-e37651745f86",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(8380),
                            Nombre = "Basico"
                        });
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Seguridad.Precio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("PlanRef")
                        .HasColumnType("int")
                        .HasColumnName("PlanRef");

                    b.Property<int>("Tipo")
                        .HasColumnType("int")
                        .HasColumnName("Tipo");

                    b.Property<DateTime>("ValidoDesde")
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidoDesde");

                    b.Property<DateTime>("ValidoHasta")
                        .HasColumnType("datetime2")
                        .HasColumnName("ValidoHasta");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PlanRef");

                    b.ToTable("Precios", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExternalId = "a88efb7e-1eb9-4c27-b780-df1feb7dc8f3",
                            FechaDeCreacion = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(8449),
                            PlanRef = 1,
                            Tipo = 0,
                            ValidoDesde = new DateTime(2023, 8, 30, 21, 49, 6, 61, DateTimeKind.Local).AddTicks(8503),
                            ValidoHasta = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Valor = 0.0m
                        });
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Seguridad.Subscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<DateTime?>("Fin")
                        .HasColumnType("datetime2")
                        .HasColumnName("Fin");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime2")
                        .HasColumnName("Inicio");

                    b.Property<int>("PrecioRef")
                        .HasColumnType("int")
                        .HasColumnName("PrecioRef");

                    b.Property<string>("UserRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("UserRef");

                    b.HasKey("Id");

                    b.HasIndex("PrecioRef");

                    b.HasIndex("UserRef");

                    b.ToTable("Subscripciones", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Seguridad.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NormalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.TiposDeContacto.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ContactType");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ExternalId");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaDeCreacion");

                    b.Property<int>("PersonaRef")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("PersonaRef");

                    b.ToTable("InformacionDeContacto", (string)null);

                    b.HasDiscriminator<string>("ContactType").HasValue("Contacto");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Personas.Cliente", b =>
                {
                    b.HasBaseType("rakoona.core.Entities.Models.Personas.Persona");

                    b.HasDiscriminator().HasValue("Cliente");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.TiposDeContacto.Celular", b =>
                {
                    b.HasBaseType("rakoona.core.Entities.Models.TiposDeContacto.Contacto");

                    b.HasDiscriminator().HasValue("Celular");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.TiposDeContacto.Email", b =>
                {
                    b.HasBaseType("rakoona.core.Entities.Models.TiposDeContacto.Contacto");

                    b.HasDiscriminator().HasValue("Email");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Seguridad.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Seguridad.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rakoona.core.Entities.Models.Seguridad.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Seguridad.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Cartilla", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Pacientes.Mascota", "Mascota")
                        .WithOne("Cartilla")
                        .HasForeignKey("rakoona.core.Entities.Models.Cartilla", "MascotaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.ClienteClinica", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Personas.Cliente", "Cliente")
                        .WithMany("ClienteClinicas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rakoona.core.Entities.Models.Clinica", "Clinica")
                        .WithMany("ClienteClinicas")
                        .HasForeignKey("ClinicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Clinica");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Clinica", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Organizacion", "Organizacion")
                        .WithMany("Clinicas")
                        .HasForeignKey("OrganizacionRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizacion");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.ClinicaMedico", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Clinica", "Clinica")
                        .WithMany("ClinicaMedicos")
                        .HasForeignKey("ClinicaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("rakoona.core.Entities.Models.Personas.Medico", "Medico")
                        .WithMany("ClinicaMedicos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Clinica");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Cita", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Pacientes.Mascota", "Mascota")
                        .WithMany("Citas")
                        .HasForeignKey("MascotaRef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Consulta", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Cartilla", "Cartilla")
                        .WithMany("Consultas")
                        .HasForeignKey("CartillaRef")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rakoona.core.Entities.Models.Personas.Medico", "Medico")
                        .WithMany("Consultas")
                        .HasForeignKey("MedicoRef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cartilla");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Mediciones.MedicionDeFrecuenciaRespiratoria", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Consultas.Consulta", "Consulta")
                        .WithMany()
                        .HasForeignKey("ConsultaId");

                    b.HasOne("rakoona.core.Entities.Models.Pacientes.Mascota", "Mascota")
                        .WithMany("MedicionesDeFrecuenciaRespiratoria")
                        .HasForeignKey("MascotaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Mediciones.MedicionDePeso", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Consultas.Consulta", "Consulta")
                        .WithMany()
                        .HasForeignKey("ConsultaId");

                    b.HasOne("rakoona.core.Entities.Models.Pacientes.Mascota", "Mascota")
                        .WithMany("MedicionesDePeso")
                        .HasForeignKey("MascotaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Mediciones.MedicionDePulso", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Consultas.Consulta", "Consulta")
                        .WithMany()
                        .HasForeignKey("ConsultaId");

                    b.HasOne("rakoona.core.Entities.Models.Pacientes.Mascota", "Mascota")
                        .WithMany("MedicionesDePulso")
                        .HasForeignKey("MascotaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Mediciones.MedicionDeRitmoCardiaco", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Consultas.Consulta", "Consulta")
                        .WithMany()
                        .HasForeignKey("ConsultaId");

                    b.HasOne("rakoona.core.Entities.Models.Pacientes.Mascota", "Mascota")
                        .WithMany("MedicionesDeRitmoCardiaco")
                        .HasForeignKey("MascotaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Consultas.Mediciones.MedicionDeTemperatura", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Consultas.Consulta", "Consulta")
                        .WithMany()
                        .HasForeignKey("ConsultaId");

                    b.HasOne("rakoona.core.Entities.Models.Pacientes.Mascota", "Mascota")
                        .WithMany("MedicionesDeTemperatura")
                        .HasForeignKey("MascotaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Domicilio", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Personas.Persona", "Persona")
                        .WithMany("Domicilios")
                        .HasForeignKey("PersonaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Dosis", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Receta", "Receta")
                        .WithMany("Dosis")
                        .HasForeignKey("RecetaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Organizacion", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Seguridad.User", "Usuario")
                        .WithOne("Organizacion")
                        .HasForeignKey("rakoona.core.Entities.Models.Organizacion", "UserRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.Color", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Pacientes.DescripcionFisicaDeMascota", "Descripcion")
                        .WithMany("Colores")
                        .HasForeignKey("DescripcionRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Descripcion");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.DescripcionFisicaDeMascota", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Pacientes.Mascota", "Mascota")
                        .WithOne("Descripcion")
                        .HasForeignKey("rakoona.core.Entities.Models.Pacientes.DescripcionFisicaDeMascota", "MascotaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rakoona.core.Entities.Models.Pacientes.RazaAnimal", "Raza")
                        .WithMany("DescipcionesFisicasDeMascota")
                        .HasForeignKey("RazaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascota");

                    b.Navigation("Raza");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.Especie", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Pacientes.ClaseDeAnimales", "ClaseAnimal")
                        .WithMany("Especies")
                        .HasForeignKey("ClaseAnimalRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rakoona.core.Entities.Models.Pacientes.GeneroAnimal", "Genero")
                        .WithMany("Especies")
                        .HasForeignKey("GeneroRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rakoona.core.Entities.Models.Pacientes.OrdenAnimal", "Orden")
                        .WithMany("Especies")
                        .HasForeignKey("OrdenAnimalRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaseAnimal");

                    b.Navigation("Genero");

                    b.Navigation("Orden");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.GeneroAnimal", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Pacientes.Familia", "Familia")
                        .WithMany("Generos")
                        .HasForeignKey("FamiliaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Familia");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.ImagenPorMascota", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Pacientes.Mascota", "Mascota")
                        .WithMany("Imagenes")
                        .HasForeignKey("MascotaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.Mascota", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Personas.Cliente", "Duenio")
                        .WithMany("Mascotas")
                        .HasForeignKey("DuenioRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Duenio");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.RazaAnimal", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Pacientes.Especie", "Especie")
                        .WithMany("Razas")
                        .HasForeignKey("EspecieRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especie");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Personas.Medico", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Personas.Persona", "PersonaInfo")
                        .WithOne("MedicoInfo")
                        .HasForeignKey("rakoona.core.Entities.Models.Personas.Medico", "PersonaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonaInfo");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Personas.Persona", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Seguridad.User", "User")
                        .WithOne("Persona")
                        .HasForeignKey("rakoona.core.Entities.Models.Personas.Persona", "UsuarioRef");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.PlanDeVacunacion", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Cartilla", "Cartilla")
                        .WithMany("PlanesDeVacunacion")
                        .HasForeignKey("CartillaRef")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rakoona.core.Entities.Models.Personas.Medico", "Medico")
                        .WithMany("Vacunas")
                        .HasForeignKey("MedicoRef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cartilla");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Seguridad.Precio", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Seguridad.Plan", "Plan")
                        .WithMany("Precios")
                        .HasForeignKey("PlanRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Seguridad.Subscripcion", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Seguridad.Precio", "Precio")
                        .WithMany("Subscripciones")
                        .HasForeignKey("PrecioRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rakoona.core.Entities.Models.Seguridad.User", "Usuario")
                        .WithMany("Subscripciones")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Precio");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.TiposDeContacto.Contacto", b =>
                {
                    b.HasOne("rakoona.core.Entities.Models.Personas.Persona", "Persona")
                        .WithMany("InformacionDeContacto")
                        .HasForeignKey("PersonaRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Cartilla", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("PlanesDeVacunacion");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Clinica", b =>
                {
                    b.Navigation("ClienteClinicas");

                    b.Navigation("ClinicaMedicos");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Organizacion", b =>
                {
                    b.Navigation("Clinicas");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.ClaseDeAnimales", b =>
                {
                    b.Navigation("Especies");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.DescripcionFisicaDeMascota", b =>
                {
                    b.Navigation("Colores");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.Especie", b =>
                {
                    b.Navigation("Razas");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.Familia", b =>
                {
                    b.Navigation("Generos");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.GeneroAnimal", b =>
                {
                    b.Navigation("Especies");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.Mascota", b =>
                {
                    b.Navigation("Cartilla")
                        .IsRequired();

                    b.Navigation("Citas");

                    b.Navigation("Descripcion")
                        .IsRequired();

                    b.Navigation("Imagenes");

                    b.Navigation("MedicionesDeFrecuenciaRespiratoria");

                    b.Navigation("MedicionesDePeso");

                    b.Navigation("MedicionesDePulso");

                    b.Navigation("MedicionesDeRitmoCardiaco");

                    b.Navigation("MedicionesDeTemperatura");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.OrdenAnimal", b =>
                {
                    b.Navigation("Especies");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Pacientes.RazaAnimal", b =>
                {
                    b.Navigation("DescipcionesFisicasDeMascota");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Personas.Medico", b =>
                {
                    b.Navigation("ClinicaMedicos");

                    b.Navigation("Consultas");

                    b.Navigation("Vacunas");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Personas.Persona", b =>
                {
                    b.Navigation("Domicilios");

                    b.Navigation("InformacionDeContacto");

                    b.Navigation("MedicoInfo");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Receta", b =>
                {
                    b.Navigation("Dosis");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Seguridad.Plan", b =>
                {
                    b.Navigation("Precios");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Seguridad.Precio", b =>
                {
                    b.Navigation("Subscripciones");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Seguridad.User", b =>
                {
                    b.Navigation("Organizacion")
                        .IsRequired();

                    b.Navigation("Persona")
                        .IsRequired();

                    b.Navigation("Subscripciones");
                });

            modelBuilder.Entity("rakoona.core.Entities.Models.Personas.Cliente", b =>
                {
                    b.Navigation("ClienteClinicas");

                    b.Navigation("Mascotas");
                });
#pragma warning restore 612, 618
        }
    }
}
